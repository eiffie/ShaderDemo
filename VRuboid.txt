[bufA]
#define PI 3.14159
// hash without sine
// https://www.shadertoy.com/view/4djSRW
#define MOD3 vec3(443.8975,397.2973, 491.1871)
float hash12(vec2 p) {
	vec3 p3  = fract(vec3(p.xyx) * MOD3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}
float rotm(float m){
	if(m<1.0)return 4.5;
	if(m<2.0)return 6.5; 
	if(m<3.0)return 5.5;
	if(m<4.0)return 1.5;
	if(m<5.0)return 8.5;
	if(m<6.0)return 7.5;
	if(m<7.0)return 3.5;
	if(m<8.0)return 2.5;
	return 0.5;
}
void mainImage(out vec4 fragColor, in vec2 fragCoord){
	if(fragCoord.y>1.0 || fragCoord.x>37.0)discard;
	if(iFrame==0){
		if(fragCoord.x<9.0)fragColor=vec4(1.0,0.4,0.2,1.0);
		else if(fragCoord.x<18.0)fragColor=vec4(0.2,1.0,0.4,1.0);
		else if(fragCoord.x<27.0)fragColor=vec4(0.4,0.2,1.0,1.0);
		else if(fragCoord.x<36.0)fragColor=vec4(1.0);
		else{
			fragColor=vec4(0.0,0.0,1.0,0.0);//level clicked,angle,rotating
		}
	}else{
		vec4 st=texture2D(iChannel0,vec2(36.5,0.5)/iResolution.xy);
		vec2 coord=fragCoord.xy;
		if(iMouse.z>0.0 && st.z==0.0){//rotate
			if(st.x<0.5){
				if(iMouse.y<iResolution.y*0.35)st.x=1.0;
				else if(iMouse.y<iResolution.y*0.7)st.x=2.0;
				else st.x=3.0;
			}
			st.y=clamp(1.5*PI*(iMouse.x-iMouse.z)/iResolution.x,-2.0/3.0*PI,2.0/3.0*PI);
		}else{
			if(iFrame<100){
				st.y=2.0/3.0*PI;
				if(hash12(vec2(iGlobalTime,iDate.w+float(iFrame)))<0.5)st.y*=-1.0;
				st.x=1.0+floor(2.9999*hash12(vec2(iGlobalTime-iDate.w,float(iFrame))));
			}
			if(st.y!=0.0){
				st.z=1.0;
				float a=floor(st.y*3.0/(2.0*PI)+0.5)*2.0*PI/3.0;
				st.y+=(a-st.y)*iTimeDelta*10.0;
				if(abs(a-st.y)<0.05 && abs(a)>0.05){//do rotation
					if(st.x>1.5 && fragCoord.x<27.0){//simple level rotation
						float f=mod(fragCoord.x,9.0);
						if(f<(st.x<2.5?4.0:1.0))coord.x=mod(coord.x+sign(a)*9.0,27.0);
					}else if(st.x<1.5){//trickier total rotation
						float f=floor(fragCoord.x/9.0),m=mod(fragCoord.x,9.0),r1=0.0,r2=1.0;
						if(a<0.0){
							if(f==0.0){r1=27.0;r2=0.0;}
							if(f==1.0){r1=-9.0;r2=1.0;}
							if(f==2.0)r2=2.0;
							if(f==3.0){r1=-18.0;r2=2.0;}
						}else{
							if(f==0.0){r1=27.0;r2=2.0;}
							if(f==1.0)r2=1.0;
							if(f==2.0){r1=-18.0;r2=2.0;}
							if(f==3.0){r1=-9.0;r2=2.0;}
						}
						if(r2>0.5)m=rotm(m);
						if(r2>1.5)m=rotm(m);
						coord.x=f*9.0+r1+m;
					}
					a=0.0;
				}
				if(abs(a)<0.05){
					st.xyz=vec3(0.0);//ready to rotate again
				}
			}
		}
		if(fragCoord.x>36.0){fragColor=st;}
		else fragColor=texture2D(iChannel0,coord/iResolution.xy);
	}
}
[image]
#define PI 3.14159
// hash without sine
// https://www.shadertoy.com/view/4djSRW
#define MOD3 vec3(443.8975,397.2973, 491.1871)
float hash12(vec2 p) {
	vec3 p3  = fract(vec3(p.xyx) * MOD3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}
float Plane(in vec3 z, in vec4 norm){return dot(z,norm.xyz)-norm.w;}
mat3  rotAA(vec3 v, float angle){//axis angle rotation
	float c=cos(angle);vec3 s=v*sin(angle);
	return mat3(v.xxx*v,v.yyy*v,v.zzz*v)*(1.0-c)+mat3(c,-s.z,s.y,s.z,c,-s.x,-s.y,s.x,c);
}

vec3 N0=vec3(0.0,0.0,-1.0),N1,N2,U;
mat3 rmx;
float pln_y=3.0;
void setup(){
	vec4 st=texture2D(iChannel0,vec2(36.5,0.5)/iResolution.xy);
	
	float a=2.0/3.0*PI;
	mat2 mx=mat2(cos(a),sin(a),-sin(a),cos(a));
	float a2=1.0/3.0;
	mat2 mx2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));
	N0.yz=mx2*N0.yz;
	N1=N0;
	N1.xz=mx*N1.xz;
	N2=N1;
	N2.xz=mx*N2.xz;
	U=vec3(0.0,0.0,1.0);
	U.xz=mx*U.xz;

	vec3 N=vec3(0.0,1.0,0.0);
	if(st.x<1.5){
		if(st.y<0.0)N=N2;
		else N=N1;
		pln_y=3.0;
	}else if(st.x<2.5){
		pln_y=1.0-1.0/1.5;
	}else pln_y=1.0+1.0/1.5;
	rmx=rotAA(N,st.y);
}

float DE(in vec3 p){	
	vec3 ps=p;
	
	p=rmx*p;
	float d=-1.0-p.y;
	d=max(d,Plane(p,vec4(N0,1.0)));
	d=max(d,Plane(p,vec4(N1,1.0)));
	d=max(d,Plane(p,vec4(N2,1.0)));

	if(pln_y<3.0){
		d=max(d,pln_y-p.y);//abs(p.y-pln_y)-1.0/1.5);
		p=ps;
		float d2=-1.0-p.y;
		d2=max(d2,Plane(p,vec4(N0,1.0)));
		d2=max(d2,Plane(p,vec4(N1,1.0)));
		d2=max(d2,Plane(p,vec4(N2,1.0)));
		d=min(d,max(d2,p.y-pln_y));//1.0/1.5-abs(p.y-pln_y)));
	}
	return d;
}
mat3 lookat(vec3 fw, vec3 up){//normalized!!
	vec3 rt=normalize(cross(fw,up));return mat3(rt,cross(rt,fw),fw);
}
vec3 Color(in vec3 p){	
	vec3 ps=p;
	p=rmx*p;
	vec3 N=vec3(0.0,-1.0,0.0),up=vec3(0.0,1.0,0.0);
	float d1=-1.0-p.y,id=27.0;
	float d2=Plane(p,vec4(N0,1.0));
	if(d2>d1){d1=d2;N=N0;id=0.0;}
	d2=Plane(p,vec4(N1,1.0));
	if(d2>d1){d1=d2;N=N1;id=9.0;}
	d2=Plane(p,vec4(N2,1.0));
	if(d2>d1){d1=d2;N=N2;id=18.0;}
	
	if(pln_y<3.0){
		d1=max(d1,pln_y-p.y);//remove non-rotated
		vec3 NN=vec3(0.0,-1.0,0.0);
		float d3=-1.0-ps.y,id2=27.0;
		float d4=Plane(ps,vec4(N0,1.0));
		if(d4>d3){d3=d4;NN=N0;id2=0.0;}
		d4=Plane(ps,vec4(N1,1.0));
		if(d4>d3){d3=d4;NN=N1;id2=9.0;}
		d4=Plane(ps,vec4(N2,1.0));
		if(d4>d3){d3=d4;NN=N2;id2=18.0;}
		d3=max(d3,p.y-pln_y); //remove rotated
		if(d3<d1){N=NN;id=id2;p=ps;}
	}
	
	if(N==-up)up=U;
	p=p*lookat(N,up);//transform to 2d

	p.y-=0.707107;
	vec2 pt=p.xy*vec2(0.57735,1.0/3.0)*vec2(1.066,1.05);
	float f=0.24+pt.y;
	pt=pt.xx+vec2(f,-f);
	vec2 ff=floor(pt);
	
	if(p.y>0.707107){
		//id+=0.0;
	}else if(p.y>-0.707107){
		id+=3.0+ff.x+ff.y;
	}else{
		id+=7.0+ff.x+ff.y;
	}
	
	vec3 col=texture2D(iChannel0,vec2(id+0.5,0.5)/iResolution.xy).rgb;
	pt=vec2(0.5)-abs(fract(pt)-vec2(0.5));
	f=abs(fract(p.y*0.707107)-0.5);
	return col*smoothstep(0.01,0.04,min(min(pt.x,pt.y),f));
}

vec3 mytextureCube(vec3 rd){
   	rd+=sin(rd.yzx*10.0+iGlobalTime+2.4*sin(rd.zxy*9.0+iGlobalTime+1.7*sin(rd*7.0+iGlobalTime)));
    return 0.5+0.2*rd;
}

// Tetrahedral normal from IQ.
vec3 normal(vec3 p, float e){vec2 v=vec2(-e,e);return normalize(v.yxx*DE(p+v.yxx)+v.xxy*DE(p+v.xxy)+v.xyx*DE(p+v.xyx)+v.yyy*DE(p+v.yyy));}

void mainImage(out vec4 fragColor, in vec2 fragCoord){
	setup();
	vec3 ro=vec3(0.0+sin(iGlobalTime*0.3)*2.0,sin(iGlobalTime*0.4),8.0);
	vec3 rd=normalize(vec3((fragCoord-0.5*iResolution.xy)/iResolution.x,1.0));
	rd=lookat(normalize(vec3(0.0,0.75,0.0)-ro),vec3(0.0,1.0,0.0))*rd;
	float t=hash12(fragCoord)*DE(ro),d,od=1.0,g=0.0;
	for(int i=0;i<64;i++){
		t+=d=DE(ro+rd*t);
		if(d<0.001 || t>12.0)break;
		od=d;g+=1.0;
	}
	vec3 col=mytextureCube(rd).rgb+vec3(g/64.0);
	if(d<0.01){
		float dif=1.0-clamp(d/od,0.0,1.0);
		col=Color(ro+rd*t);
		col*=dif;
        vec3 N=normal(ro+rd*t,0.001);
        vec3 refl=reflect(rd,N),refr=refract(rd,N,1.0/1.5);
        vec2 IR=vec2(dot(refl,N),dot(refr,-N));
        IR=(IR-1.5*IR.yx)/(IR+1.5*IR.yx);
        float fres=dot(IR,IR)/2.0;
        col+=8.0*col*mytextureCube(reflect(rd,N)).rgb*fres;
	}
	fragColor=vec4(col,0.0);
}